# Cursor AI Rules for AIPixels Project

## Project Context
This is a Next.js AI image generation platform called AIPixels.

## Documentation References
- Clerk Authentication: https://clerk.com/docs
- Next.js: https://nextjs.org/docs
- Tailwind CSS: https://tailwindcss.com/docs
- React: https://react.dev

## Authentication (Clerk)
**IMPORTANT: This project uses @clerk/nextjs v6**

When working with authentication features:
- Reference Clerk's documentation at https://clerk.com/docs
- Use Clerk's prebuilt components for sign-in, sign-up, and user management
- Follow Clerk's Next.js integration guide: https://clerk.com/docs/quickstarts/nextjs
- Implement middleware for route protection: https://clerk.com/docs/references/nextjs/clerk-middleware

### Clerk v6 Breaking Changes
1. **auth() is now async** - Must use `await auth()`
2. **auth().protect() is now auth.protect()** - Call directly on auth
3. **clerkClient() is now async** - Must use `await clerkClient()`
4. **clerkMiddleware handler must be async** - Use `async (auth, request) => {}`
5. **Static rendering by default** - Add `dynamic` prop to ClerkProvider if needed
6. **Deprecated APIs removed**:
   - `authMiddleware()` → Use `clerkMiddleware()`
   - `redirectToSignIn()` → Use `const { redirectToSignIn } = await auth()`
   - `redirectToSignUp()` → Use `const { redirectToSignUp } = await auth()`

## Key Clerk Concepts
- User object: Contains all account information
- Organizations: For team collaboration and shared resources
- Authentication strategies: Multiple methods (email, social, etc.)
- Session management: Handled automatically by Clerk

## Code Style
- Use TypeScript for type safety
- Follow React hooks best practices
- Use Tailwind CSS for styling
- Maintain consistent component structure

## UI Components
- All components should be responsive
- Use Tailwind CSS utility classes
- Follow the existing design system (gray-900 background, blue-600 primary)
- Maintain accessibility standards (WCAG)

## Authentication Requirements
When implementing auth features:
1. Always protect sensitive routes with Clerk middleware
2. Use `<SignIn />` and `<SignUp />` components from @clerk/nextjs
3. Access user data via `useUser()` hook
4. Check authentication status with `useAuth()` hook
5. Protect API routes with `auth()` helper

## Common Clerk v6 Patterns

### Protecting Pages (App Router) - v6
```typescript
import { auth } from '@clerk/nextjs/server';
import { redirect } from 'next/navigation';

export default async function ProtectedPage() {
  const { userId } = await auth(); // ✅ v6: auth() is async
  
  if (!userId) {
    redirect('/sign-in');
  }
  
  return <div>Protected Content</div>;
}
```

### Using auth.protect() - v6
```typescript
import { auth } from '@clerk/nextjs/server';

export default async function ProtectedPage() {
  await auth.protect(); // ✅ v6: auth.protect() instead of auth().protect()
  
  return <div>Protected Content</div>;
}
```

### Using User Data (Client Component)
```typescript
import { useUser } from '@clerk/nextjs';

export function UserProfile() {
  const { user, isLoaded, isSignedIn } = useUser();
  
  if (!isLoaded) return <div>Loading...</div>;
  if (!isSignedIn) return <div>Please sign in</div>;
  
  return <div>Hello, {user.firstName}!</div>;
}
```

### Middleware Protection - v6
```typescript
// middleware.tsx
import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';

const isPublicRoute = createRouteMatcher([
  '/',
  '/sign-in(.*)',
  '/sign-up(.*)',
]);

const isProtectedRoute = createRouteMatcher([
  '/dashboard(.*)',
  '/api/protected(.*)',
]);

export default clerkMiddleware(async (auth, request) => { // ✅ v6: async handler
  if (isProtectedRoute(request)) {
    await auth.protect(); // ✅ v6: auth.protect()
  }
});

export const config = {
  matcher: [
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    '/(api|trpc)(.*)',
  ],
};
```

### Using clerkClient() - v6
```typescript
import { clerkClient } from '@clerk/nextjs/server';

export async function GET() {
  const client = await clerkClient(); // ✅ v6: clerkClient() is async
  const users = await client.users.getUserList();
  
  return Response.json({ users });
}
```

### API Route Protection - v6
```typescript
import { auth } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

export async function GET() {
  const { userId } = await auth(); // ✅ v6: auth() is async
  
  if (!userId) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  return NextResponse.json({ data: 'Protected data' });
}
```

## References
- Clerk Documentation: https://clerk.com/docs
- Clerk Next.js Quickstart: https://clerk.com/docs/quickstarts/nextjs
- Clerk Components: https://clerk.com/docs/components/overview
- Clerk API Reference: https://clerk.com/docs/references/nextjs/overview

